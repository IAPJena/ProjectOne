function LightSourceDefinitionDialog(initialSourceObject,fontSize,fontName)
    %LIGHTSOURCEDEFINITIONDIALOG A GUI to input all source parameters and
    %returns the source object. The  lightSourceObjectHandle is handle
    %object of lightSourceObject and it will be updated using the
    %user input.
    
    if nargin < 1
        initialSourceObject = HarmonicFieldSource;
        fontSize = 10;
        fontName = 'FixedSize';
    end
    figureHandle = ObjectHandle(struct());
    figureHandle.Object.FontSize = fontSize;
    figureHandle.Object.FontName = fontName;
    figureHandle.Object.TemporarySourceObject = initialSourceObject;
    % Creation of all uicontrols
    % --- FIGURE -------------------------------------
    figureHandle.Object.MainFigureHandle = figure( ...
        'Tag', 'MainFigureHandle', ...
        'Units','Normalized',...
        'Position', [0.25,0.2,0.5,0.6], ...
        'Name', 'Light Source Data Entry', ... %'WindowStyle','Modal',...
        'MenuBar', 'none', ...
        'NumberTitle', 'off', ...
        'Renderer','painters',...
        'Color', get(0,'DefaultUicontrolBackgroundColor'));
    
    % --- TABS and PANELS ----------------------------------------
    figureHandle.Object.SourceDefinitionTabGroup = uitabgroup(...
        'Parent', figureHandle.Object.MainFigureHandle, ...
        'Units', 'Normalized', ...
        'Position', [0, 0.01, 1.0, 0.96],...
        'TabLocation','Left');
    
    % ----- 1. Basic Parameters ----------------------------------
    figureHandle.Object.tabBasicParameters = ...
        uitab(figureHandle.Object.SourceDefinitionTabGroup, 'title',...
        '   Basic Parameters   ',...
        'ButtonDownFcn',{@tabBasicParameters_ButtonDownFcn,figureHandle});
    figureHandle.Object.panelBasicParameters = uipanel( ...
        'Parent', figureHandle.Object.tabBasicParameters, ...
        'Tag', 'panelBasicParameters', ...
        'Units','Normalized',...
        'Position', [0,0.1,1,0.9], ...
        'FontSize',fontSize,...
        'FontName',fontName);%,...
    %'Title', 'Basic Parameters');
    figureHandle.Object.panelPositionSizeShape = uipanel( ...
        'Parent', figureHandle.Object.panelBasicParameters, ...
        'Tag', 'panelPositionSizeShape', ...
        'Units','Normalized',...
        'Position', [0,0,1,1], ...
        'FontSize',fontSize,...
        'FontName',fontName,...
        'Title', 'Position Size and Shape');
    
    figureHandle.Object.lblLateralPosition = uicontrol( ...
        'Parent', figureHandle.Object.panelPositionSizeShape, ...
        'Tag', 'lblLateralPosition', ...
        'Style', 'text', ...
        'HorizontalAlignment','right',...
        'Units','Normalized',...
        'Position', [0.02,0.90,0.45,0.062], ...
        'FontSize',fontSize,...
        'FontName',fontName,...
        'String', 'Lateral Position (X:Y)');
    
    
    figureHandle.Object.txtLateralPositionX = uicontrol( ...
        'Parent', figureHandle.Object.panelPositionSizeShape, ...
        'Tag', 'txtLateralPositionX', ...
        'Style', 'edit', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.50,0.92,0.20,0.060], ...
        'BackgroundColor', [1 1 1], ...
        'String', '0', ...
        'FontSize',fontSize,'FontName',fontName);
    
    figureHandle.Object.txtLateralPositionY = uicontrol( ...
        'Parent', figureHandle.Object.panelPositionSizeShape, ...
        'Tag', 'txtLateralPositionY', ...
        'Style', 'edit', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.75,0.92,0.20,0.060], ...
        'BackgroundColor', [1 1 1], ...
        'String', '0', ...
        'FontSize',fontSize,'FontName',fontName);
    % -----------------------------------------------------------------
    figureHandle.Object.lblDistanceToInputPlane = uicontrol( ...
        'Parent', figureHandle.Object.panelPositionSizeShape, ...
        'Tag', 'lblDistanceToInputPlane', ...
        'Style', 'text', ...
        'HorizontalAlignment','right',...
        'Units','Normalized',...
        'Position', [0.02,0.82,0.45,0.062], ...
        'FontSize',fontSize,...
        'FontName',fontName,...
        'String', 'Distance To Input Plane');
    
    
    figureHandle.Object.txtDistanceToInputPlane = uicontrol( ...
        'Parent', figureHandle.Object.panelPositionSizeShape, ...
        'Tag', 'txtDistanceToInputPlane', ...
        'Style', 'edit', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.50,0.84,0.45,0.060], ...
        'BackgroundColor', [1 1 1], ...
        'String', '10e-3', ...
        'FontSize',fontSize,'FontName',fontName);
    % -----------------------------------------------------------------
    
    figureHandle.Object.lblPrincipalDirectionSpecification = uicontrol( ...
        'Parent', figureHandle.Object.panelPositionSizeShape, ...
        'Tag', 'lblPrincipalDirectionSpecification', ...
        'Style', 'text', ...
        'HorizontalAlignment','right',...
        'Units','Normalized',...
        'Position', [0.02,0.75,0.45,0.062], ...
        'FontSize',fontSize,...
        'FontName',fontName,...
        'String', 'Principal Direction Specification');
    
    figureHandle.Object.popPrincipalDirectionSpecification = uicontrol( ...
        'Parent', figureHandle.Object.panelPositionSizeShape, ...
        'Tag', 'popPrincipalDirectionSpecification', ...
        'Style', 'popupmenu', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.50,0.76,0.45,0.060], ...
        'BackgroundColor', [1 1 1], ...
        'String', getSupportedDirectionSpecifications, ...
        'Value',1,...
        'FontSize',fontSize,'FontName',fontName);
    % -----------------------------------------------------------------
    figureHandle.Object.lblPrincipalDirectionValue = uicontrol( ...
        'Parent', figureHandle.Object.panelPositionSizeShape, ...
        'Tag', 'lblPrincipalDirectionValue', ...
        'Style', 'text', ...
        'HorizontalAlignment','right',...
        'Units','Normalized',...
        'Position', [0.02,0.66,0.45,0.060], ...
        'FontSize',fontSize,...
        'FontName',fontName,...
        'String', 'Principal Direction Value');
    
    figureHandle.Object.txtPrincipalDirectionValue1 = uicontrol( ...
        'Parent', figureHandle.Object.panelPositionSizeShape, ...
        'Tag', 'txtPrincipalDirectionValue1', ...
        'Style', 'edit', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.50,0.68,0.20,0.060], ...
        'BackgroundColor', [1 1 1], ...
        'String', '0', ...
        'FontSize',fontSize,'FontName',fontName);
    
    figureHandle.Object.txtPrincipalDirectionValue2 = uicontrol( ...
        'Parent', figureHandle.Object.panelPositionSizeShape, ...
        'Tag', 'txtPrincipalDirectionValue2', ...
        'Style', 'edit', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.75,0.68,0.20,0.060], ...
        'BackgroundColor', [1 1 1], ...
        'String', '0', ...
        'FontSize',fontSize,'FontName',fontName);
    
    % -----------------------------------------------------------------
    figureHandle.Object.lblFieldSizeSpecification = uicontrol( ...
        'Parent', figureHandle.Object.panelPositionSizeShape, ...
        'Tag', 'lblFieldSizeSpecification', ...
        'Style', 'text', ...
        'HorizontalAlignment','right',...
        'Units','Normalized',...
        'Position', [0.02,0.59,0.45,0.062], ...
        'FontSize',fontSize,...
        'FontName',fontName,...
        'String', 'Actual Field Size Specification');
    
    figureHandle.Object.popFieldSizeSpecification = uicontrol( ...
        'Parent', figureHandle.Object.panelPositionSizeShape, ...
        'Tag', 'popFieldSizeSpecification', ...
        'Style', 'popupmenu', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.50,0.60,0.45,0.060], ...
        'BackgroundColor', [1 1 1], ...
        'String', getSupportedFieldSizeSpecifications, ...
        'Value',1,...
        'FontSize',fontSize,'FontName',fontName);
    
    % -----------------------------------------------------------------
    figureHandle.Object.lblFieldSizeValue = uicontrol( ...
        'Parent', figureHandle.Object.panelPositionSizeShape, ...
        'Tag', 'lblFieldSizeValue', ...
        'Style', 'text', ...
        'HorizontalAlignment','right',...
        'Units','Normalized',...
        'Position', [0.02,0.50,0.45,0.062], ...
        'FontSize',fontSize,...
        'FontName',fontName,...
        'String', 'Actual Field Size Value');
    
    
    figureHandle.Object.txtFieldSizeValue1 = uicontrol( ...
        'Parent', figureHandle.Object.panelPositionSizeShape, ...
        'Tag', 'txtFieldSizeValue1', ...
        'Style', 'edit', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.50,0.52,0.20,0.060], ...
        'BackgroundColor', [1 1 1], ...
        'String', '1', ...
        'FontSize',fontSize,'FontName',fontName);
    
    figureHandle.Object.txtFieldSizeValue2 = uicontrol( ...
        'Parent', figureHandle.Object.panelPositionSizeShape, ...
        'Tag', 'txtFieldSizeValue2', ...
        'Style', 'edit', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.75,0.52,0.20,0.060], ...
        'BackgroundColor', [1 1 1], ...
        'String', '1', ...
        'FontSize',fontSize,'FontName',fontName);
    % -----------------------------------------------------------------
    
    figureHandle.Object.lblFieldBoarderShape = uicontrol( ...
        'Parent', figureHandle.Object.panelPositionSizeShape, ...
        'Tag', 'lblActualFieldBoarderShape', ...
        'Style', 'text', ...
        'HorizontalAlignment','right',...
        'Units','Normalized',...
        'Position', [0.02,0.43,0.45,0.062], ...
        'FontSize',fontSize,...
        'FontName',fontName,...
        'String', 'Actual Field Boarder Shape');
    
    figureHandle.Object.popFieldBoarderShape = uicontrol( ...
        'Parent', figureHandle.Object.panelPositionSizeShape, ...
        'Tag', 'popFieldBoarderShape', ...
        'Style', 'popupmenu', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.50,0.44,0.45,0.060], ...
        'BackgroundColor', [1 1 1], ...
        'String', getSupportedFieldBoarderShapes, ...
        'Value',1,...
        'Enable','Off',...
        'FontSize',fontSize,'FontName',fontName);
    % -----------------------------------------------------------------
    figureHandle.Object.lblSmoothEdgeSizeSpecification = uicontrol( ...
        'Parent', figureHandle.Object.panelPositionSizeShape, ...
        'Tag', 'lblSmoothEdgeSizeSpecification', ...
        'Style', 'text', ...
        'HorizontalAlignment','right',...
        'Units','Normalized',...
        'Position', [0.02,0.36,0.45,0.062], ...
        'FontSize',fontSize,...
        'FontName',fontName,...
        'String', 'Smooth Edge Size Specification');
    
    
    figureHandle.Object.popSmoothEdgeSizeSpecification = uicontrol( ...
        'Parent', figureHandle.Object.panelPositionSizeShape, ...
        'Tag', 'popSmoothEdgeSizeSpecification', ...
        'Style', 'popupmenu', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.50,0.36,0.45,0.060], ...
        'BackgroundColor', [1 1 1], ...
        'String',getSupportedSmoothEdgeSizeSpecifications, ...
        'Value',1,...
        'FontSize',fontSize,'FontName',fontName);
    % -----------------------------------------------------------------
    figureHandle.Object.lblSmoothEdgeSizeValue = uicontrol( ...
        'Parent', figureHandle.Object.panelPositionSizeShape, ...
        'Tag', 'lblSmoothEdgeSizeValue', ...
        'Style', 'text', ...
        'HorizontalAlignment','right',...
        'Units','Normalized',...
        'Position', [0.02,0.26,0.45,0.062], ...
        'FontSize',fontSize,...
        'FontName',fontName,...
        'String', 'Smooth Edge Size Value');
    
    figureHandle.Object.txtSmoothEdgeSizeValue = uicontrol( ...
        'Parent', figureHandle.Object.panelPositionSizeShape, ...
        'Tag', 'txtSmoothEdgeSizeValue', ...
        'Style', 'edit', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.50,0.28,0.20,0.060], ...
        'BackgroundColor', [1 1 1], ...
        'String', '1e-2', ...
        'FontSize',fontSize,'FontName',fontName);
%     figureHandle.Object.txtSmoothEdgeSizeValue2 = uicontrol( ...
%         'Parent', figureHandle.Object.panelPositionSizeShape, ...
%         'Tag', 'txtSmoothEdgeSizeValue2', ...
%         'Style', 'edit', ...
%         'HorizontalAlignment','left',...
%         'Units','Normalized',...
%         'Position', [0.75,0.28,0.20,0.060], ...
%         'BackgroundColor', [1 1 1], ...
%         'String', '1e-2', ...
%         'FontSize',fontSize,'FontName',fontName);
    % -----------------------------------------------------------------
    figureHandle.Object.lblZeroBoarderSizeSpecification = uicontrol( ...
        'Parent', figureHandle.Object.panelPositionSizeShape, ...
        'Tag', 'lblZeroBoarderSizeSpecification', ...
        'Style', 'text', ...
        'HorizontalAlignment','right',...
        'Units','Normalized',...
        'Position', [0.02,0.19,0.45,0.062], ...
        'FontSize',fontSize,...
        'FontName',fontName,...
        'String', 'Zero Boarder Size Specification');
    figureHandle.Object.popZeroBoarderSizeSpecification = uicontrol( ...
        'Parent', figureHandle.Object.panelPositionSizeShape, ...
        'Tag', 'popZeroBoarderSizeSpecification', ...
        'Style', 'popupmenu', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.50,0.20,0.45,0.062], ...
        'BackgroundColor', [1 1 1], ...
        'String',getSupportedZeroBoarderSizeSpecifications, ...
        'Value',1,...
        'FontSize',fontSize,'FontName',fontName);
    
    % -----------------------------------------------------------------
    
    figureHandle.Object.lblZeroBoarderSizeValue = uicontrol( ...
        'Parent', figureHandle.Object.panelPositionSizeShape, ...
        'Tag', 'lblZeroBoarderSizeValue', ...
        'Style', 'text', ...
        'HorizontalAlignment','right',...
        'Units','Normalized',...
        'Position', [0.02,0.10,0.45,0.062], ...
        'FontSize',fontSize,...
        'FontName',fontName,...
        'String', 'Zero Boarder Size Value');
    
    figureHandle.Object.txtZeroBoarderSizeValue1 = uicontrol( ...
        'Parent', figureHandle.Object.panelPositionSizeShape, ...
        'Tag', 'txtZeroBoarderSizeValue1', ...
        'Style', 'edit', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.50,0.12,0.20,0.060], ...
        'BackgroundColor', [1 1 1], ...
        'String', '10e-6', ...
        'FontSize',fontSize,'FontName',fontName);
    
    figureHandle.Object.txtZeroBoarderSizeValue2 = uicontrol( ...
        'Parent', figureHandle.Object.panelPositionSizeShape, ...
        'Tag', 'txtZeroBoarderSizeValue2', ...
        'Style', 'edit', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.75,0.12,0.20,0.060], ...
        'BackgroundColor', [1 1 1], ...
        'String', '10e-6', ...
        'FontSize',fontSize,'FontName',fontName);
    % -----------------------------------------------------------------
    figureHandle.Object.lblMediumName = uicontrol( ...
        'Parent', figureHandle.Object.panelPositionSizeShape, ...
        'Tag', 'lblMediumName', ...
        'Style', 'text', ...
        'HorizontalAlignment','right',...
        'Units','Normalized',...
        'Position', [0.02,0.00,0.45,0.062], ...
        'FontSize',fontSize,...
        'FontName',fontName,...
        'String', 'Medium Name ');
    
    figureHandle.Object.txtMediumName = uicontrol( ...
        'Parent', figureHandle.Object.panelPositionSizeShape, ...
        'Tag', 'txtMediumName', ...
        'Style', 'edit', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.50,0.02,0.45,0.060], ...
        'BackgroundColor', [1 1 1], ...
        'String', 'Air', 'enable','off',...
        'FontSize',fontSize,'FontName',fontName);
    
    
    % ----- 2. Spatial Parameters ----------------------------------
    figureHandle.Object.tabSpatialParameters = ...
        uitab(figureHandle.Object.SourceDefinitionTabGroup, 'title',...
        '   Spatial Parameters   ',...
        'ButtonDownFcn',{@tabSpatialParameters_ButtonDownFcn,figureHandle});
    
    figureHandle.Object.panelSpatialParameters = uipanel( ...
        'Parent', figureHandle.Object.tabSpatialParameters, ...
        'Tag', 'panelSpatialParameters', ...
        'Units','Normalized',...
        'Position',[0.02,0.1,0.9,0.8],...
        'FontSize',fontSize,...
        'FontName',fontName);%,...
    
    figureHandle.Object.tblSpatialParameters = uitable( ...
        'Parent', figureHandle.Object.panelSpatialParameters, ...
        'Tag', 'tblSpatialParameters', ...
        'UserData', zeros(1,0), ...
        'Units','Normalized',...
        'Position', [0.0,0.0,1.0,1.0], ...
        'fontSize',fontSize,'FontName',fontName,...
        'BackgroundColor', [1 1 1;0.961 0.961 0.961], ...
        'ColumnEditable', [false,true], ...
        'ColumnFormat', {'char','char'}, ...
        'ColumnName', {'Parameter Name','Parameter Value'}, ...
        'ColumnWidth', {300,200}, ...
        'RowName', 'numbered');
    set(figureHandle.Object.tblSpatialParameters,...
        'CellEditCallback',{@tblSpatialParameters_CellEditCallback,figureHandle},...
        'CellSelectionCallback',{@tblSpatialParameters_CellSelectionCallback,figureHandle});
    % -----------------------------------------------------------------
    
    figureHandle.Object.lblSpatialProfile = uicontrol( ...
        'Parent', figureHandle.Object.tabSpatialParameters, ...
        'Tag', 'lblSpatialProfile', ...
        'Style', 'text', ...
        'HorizontalAlignment','right',...
        'Units','Normalized',...
        'Position', [0.02,0.90,0.40,0.075], ...
        'FontSize',fontSize,...
        'FontName',fontName,...
        'Visible','On',...
        'String', 'Spatial Profile');
    
    [~,spatialProfileList] = getSupportedSpatialProfiles;
    figureHandle.Object.popSpatialProfile = uicontrol( ...
        'Parent', figureHandle.Object.tabSpatialParameters, ...
        'Tag', 'popSpatialProfile', ...
        'Style', 'popupmenu', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.45,0.90,0.45,0.075], ...
        'BackgroundColor', [1 1 1], ...
        'String', spatialProfileList, ...
        'Value',1,...
        'Visible','On',...
        'FontSize',fontSize,'FontName',fontName);
    
    % ----- 3. Sampling Parameters ----------------------------------
    figureHandle.Object.tabSamplingParameters = ...
        uitab(figureHandle.Object.SourceDefinitionTabGroup, 'title',...
        '   Sampling Parameters   ',...
        'ButtonDownFcn',{@tabSamplingParameters_ButtonDownFcn,figureHandle});
    figureHandle.Object.panelSamplingParameters = uipanel( ...
        'Parent', figureHandle.Object.tabSamplingParameters, ...
        'Tag', 'panelSamplingParameters', ...
        'Units','Normalized',...
        'Position', [0,0.1,1,0.9], ...
        'FontSize',fontSize,...
        'FontName',fontName);%,...
    figureHandle.Object.panelSamplingPointsAndDistance = uipanel( ...
        'Parent', figureHandle.Object.panelSamplingParameters, ...
        'Tag', 'panelSamplingPointsAndDistance', ...
        'Units','Normalized',...
        'Position', [0,0.15,1,0.85], ...
        'FontSize',fontSize,...
        'FontName',fontName,...
        'Title', 'Sampling Points And Distance');
    
    figureHandle.Object.chkSamplingPoints = uicontrol( ...
        'Parent', figureHandle.Object.panelSamplingPointsAndDistance, ...
        'Tag', 'lblSamplingPoints', ...
        'Style', 'checkbox', ...
        'HorizontalAlignment','right',...
        'Units','Normalized',...
        'Position', [0.45,0.90,0.04,0.075], ...
        'FontSize',fontSize,...
        'FontName',fontName,...
        'String', '',...
        'Value',true,...
        'Callback',{@chkSamplingPoints_Callback,figureHandle});
    figureHandle.Object.lblSamplingPoints = uicontrol( ...
        'Parent', figureHandle.Object.panelSamplingPointsAndDistance, ...
        'Tag', 'lblSamplingPoints', ...
        'Style', 'text', ...
        'HorizontalAlignment','right',...
        'Units','Normalized',...
        'Position', [0.02,0.88,0.42,0.075], ...
        'FontSize',fontSize,...
        'FontName',fontName,...
        'String', 'Field Sampling Points (Nx : Ny)');
    
    
    figureHandle.Object.txtSamplingPointsNX = uicontrol( ...
        'Parent', figureHandle.Object.panelSamplingPointsAndDistance, ...
        'Tag', 'txtSamplingPointsNX', ...
        'Style', 'edit', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.50,0.90,0.20,0.075], ...
        'BackgroundColor', [1 1 1], ...
        'String', '0', ...
        'FontSize',fontSize,'FontName',fontName);
    
    figureHandle.Object.txtSamplingPointsNy = uicontrol( ...
        'Parent', figureHandle.Object.panelSamplingPointsAndDistance, ...
        'Tag', 'txtSamplingPointsNy', ...
        'Style', 'edit', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.75,0.90,0.20,0.075], ...
        'BackgroundColor', [1 1 1], ...
        'String', '0', ...
        'FontSize',fontSize,'FontName',fontName);
    % -----------------------------------------------------------------
    figureHandle.Object.chkSamplingDistance = uicontrol( ...
        'Parent', figureHandle.Object.panelSamplingPointsAndDistance, ...
        'Tag', 'chkSamplingDistance', ...
        'Style', 'checkbox', ...
        'HorizontalAlignment','right',...
        'Units','Normalized',...
        'Position', [0.45,0.80,0.04,0.075], ...
        'FontSize',fontSize,...
        'FontName',fontName,...
        'String', '',...
        'Value',false,...
        'Callback',{@chkSamplingDistance_Callback,figureHandle});
    figureHandle.Object.lblSamplingDistance = uicontrol( ...
        'Parent', figureHandle.Object.panelSamplingPointsAndDistance, ...
        'Tag', 'lblSamplingDistance', ...
        'Style', 'text', ...
        'HorizontalAlignment','right',...
        'Units','Normalized',...
        'Position', [0.02,0.78,0.42,0.075], ...
        'FontSize',fontSize,...
        'FontName',fontName,...
        'String', 'Sampling Distance (dx : dy)');
    
    figureHandle.Object.txtSamplingDistanceX = uicontrol( ...
        'Parent', figureHandle.Object.panelSamplingPointsAndDistance, ...
        'Tag', 'txtSamplingDistanceDx', ...
        'Style', 'edit', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.50,0.80,0.20,0.075], ...
        'BackgroundColor', [1 1 1], ...
        'String', '0', 'enable','off',...
        'FontSize',fontSize,'FontName',fontName);
    
    figureHandle.Object.txtSamplingDistanceY = uicontrol( ...
        'Parent', figureHandle.Object.panelSamplingPointsAndDistance, ...
        'Tag', 'txtSamplingDistanceDy', ...
        'Style', 'edit', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.75,0.80,0.20,0.075], ...
        'BackgroundColor', [1 1 1], ...
        'String', '0',  'enable','off',...
        'FontSize',fontSize,'FontName',fontName);
    % -----------------------------------------------------------------
    
    figureHandle.Object.lblDisplayActualFieldSize = uicontrol( ...
        'Parent', figureHandle.Object.panelSamplingPointsAndDistance, ...
        'Tag', 'lblDisplayActualFieldSize', ...
        'Style', 'text', ...
        'HorizontalAlignment','right',...
        'Units','Normalized',...
        'Position', [0.02,0.69,0.45,0.075], ...
        'FontSize',fontSize,...
        'FontName',fontName,...
        'Visible','on',...
        'String', 'Actual Field Size With Smooth Edge (Dx : Dy)');
    
    figureHandle.Object.txtDisplayActualFieldSizeWithSmoothEdgeX = uicontrol( ...
        'Parent', figureHandle.Object.panelSamplingPointsAndDistance, ...
        'Tag', 'txtDisplayActualFieldSizeWithSmoothEdgeX', ...
        'Style', 'edit', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.50,0.70,0.20,0.075], ...
        'BackgroundColor', [1 1 1], ...
        'String', '1e-2', 'enable','off',...
        'FontSize',fontSize,'FontName',fontName);
    
    figureHandle.Object.txtDisplayActualFieldSizeWithSmoothEdgeY = uicontrol( ...
        'Parent', figureHandle.Object.panelSamplingPointsAndDistance, ...
        'Tag', 'txtDisplayActualFieldSizeWithSmoothEdgeY', ...
        'Style', 'edit', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.75,0.70,0.20,0.075], ...
        'BackgroundColor', [1 1 1], ...
        'String', '1e-2', 'enable','off',...
        'FontSize',fontSize,'FontName',fontName);
    
    % -----------------------------------------------------------------
    
    figureHandle.Object.lblDisplayZeroBoarderSize = uicontrol( ...
        'Parent', figureHandle.Object.panelSamplingPointsAndDistance, ...
        'Tag', 'lblDisplayZeroBoarderSize', ...
        'Style', 'text', ...
        'HorizontalAlignment','right',...
        'Units','Normalized',...
        'Position', [0.02,0.59,0.45,0.075], ...
        'FontSize',fontSize,...
        'FontName',fontName,...
        'String', 'Zero Boarder Size (Left : Right)');
    
    
    figureHandle.Object.txtDisplayZeroBoarderSizeLeft = uicontrol( ...
        'Parent', figureHandle.Object.panelSamplingPointsAndDistance, ...
        'Tag', 'txtDisplayZeroBoarderSizeLeft', ...
        'Style', 'edit', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.50,0.60,0.20,0.075], ...
        'BackgroundColor', [1 1 1], ...
        'String', '0', 'enable','off',...
        'FontSize',fontSize,'FontName',fontName);
    
    figureHandle.Object.txtDisplayZeroBoarderSizeRight = uicontrol( ...
        'Parent', figureHandle.Object.panelSamplingPointsAndDistance, ...
        'Tag', 'txtDisplayZeroBoarderSizeLeft', ...
        'Style', 'edit', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.75,0.60,0.20,0.075], ...
        'BackgroundColor', [1 1 1], ...
        'String', '0','enable','off', ...
        'FontSize',fontSize,'FontName',fontName);
    
    % -----------------------------------------------------------------
    
    figureHandle.Object.lblDisplayZeroBoarderSize = uicontrol( ...
        'Parent', figureHandle.Object.panelSamplingPointsAndDistance, ...
        'Tag', 'lblDisplayZeroBoarderSize', ...
        'Style', 'text', ...
        'HorizontalAlignment','right',...
        'Units','Normalized',...
        'Position', [0.02,0.49,0.45,0.075], ...
        'FontSize',fontSize,...
        'FontName',fontName,...
        'String', 'Zero Boarder Size (Top : Bottom)');
    
    
    figureHandle.Object.txtDisplayZeroBoarderSizeTop = uicontrol( ...
        'Parent', figureHandle.Object.panelSamplingPointsAndDistance, ...
        'Tag', 'txtDisplayZeroBoarderSizeTop', ...
        'Style', 'edit', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.50,0.50,0.20,0.075], ...
        'BackgroundColor', [1 1 1], ...
        'String', '0', 'enable','off',...
        'FontSize',fontSize,'FontName',fontName);
    
    figureHandle.Object.txtDisplayZeroBoarderSizeBottom = uicontrol( ...
        'Parent', figureHandle.Object.panelSamplingPointsAndDistance, ...
        'Tag', 'txtDisplayZeroBoarderSizeBottom', ...
        'Style', 'edit', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.75,0.50,0.20,0.075], ...
        'BackgroundColor', [1 1 1], ...
        'String', '0','enable','off', ...
        'FontSize',fontSize,'FontName',fontName);
    
    % -----------------------------------------------------------------
    
    figureHandle.Object.lblDisplayZeroBoarderSamplePoints = uicontrol( ...
        'Parent', figureHandle.Object.panelSamplingPointsAndDistance, ...
        'Tag', 'lblDisplayZeroBoarderSamplePoints', ...
        'Style', 'text', ...
        'HorizontalAlignment','right',...
        'Units','Normalized',...
        'Position', [0.02,0.39,0.45,0.075], ...
        'FontSize',fontSize,...
        'FontName',fontName,...
        'String', 'Boarder Sample Points (Left : Right)');
    
    
    figureHandle.Object.txtDisplayZeroBoarderSamplePointsLeft = uicontrol( ...
        'Parent', figureHandle.Object.panelSamplingPointsAndDistance, ...
        'Tag', 'txtDisplayZeroBoarderSamplePointsLeft', ...
        'Style', 'edit', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.50,0.40,0.20,0.075], ...
        'BackgroundColor', [1 1 1], ...
        'String', '0', 'enable','off',...
        'FontSize',fontSize,'FontName',fontName);
    
    figureHandle.Object.txtDisplayZeroBoarderSamplePointsRight = uicontrol( ...
        'Parent', figureHandle.Object.panelSamplingPointsAndDistance, ...
        'Tag', 'txtDisplayZeroBoarderSamplePointsLeft', ...
        'Style', 'edit', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.75,0.40,0.20,0.075], ...
        'BackgroundColor', [1 1 1], ...
        'String', '0', 'enable','off',...
        'FontSize',fontSize,'FontName',fontName);
    % -----------------------------------------------------------------
    
    figureHandle.Object.lblDisplayZeroBoarderSamplePoints = uicontrol( ...
        'Parent', figureHandle.Object.panelSamplingPointsAndDistance, ...
        'Tag', 'lblDisplayZeroBoarderSamplePoints', ...
        'Style', 'text', ...
        'HorizontalAlignment','right',...
        'Units','Normalized',...
        'Position', [0.02,0.29,0.45,0.075], ...
        'FontSize',fontSize,...
        'FontName',fontName,...
        'String', 'Boarder Sample Points (Top : Bottom)');
    
    
    figureHandle.Object.txtDisplayZeroBoarderSamplePointsTop = uicontrol( ...
        'Parent', figureHandle.Object.panelSamplingPointsAndDistance, ...
        'Tag', 'txtDisplayZeroBoarderSamplePointsTop', ...
        'Style', 'edit', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.50,0.30,0.20,0.075], ...
        'BackgroundColor', [1 1 1], ...
        'String', '0', 'enable','off',...
        'FontSize',fontSize,'FontName',fontName);
    
    figureHandle.Object.txtDisplayZeroBoarderSamplePointsBottom = uicontrol( ...
        'Parent', figureHandle.Object.panelSamplingPointsAndDistance, ...
        'Tag', 'txtDisplayZeroBoarderSamplePointsBottom', ...
        'Style', 'edit', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.75,0.30,0.20,0.075], ...
        'BackgroundColor', [1 1 1], ...
        'String', '0', 'enable','off',...
        'FontSize',fontSize,'FontName',fontName);
    % -----------------------------------------------------------------
    
    figureHandle.Object.lblDisplayTotalFieldSize = uicontrol( ...
        'Parent', figureHandle.Object.panelSamplingPointsAndDistance, ...
        'Tag', 'lblDisplayTotalFieldSize', ...
        'Style', 'text', ...
        'HorizontalAlignment','right',...
        'Units','Normalized',...
        'Position', [0.02,0.19,0.45,0.075], ...
        'FontSize',fontSize,...
        'FontName',fontName,...
        'String', 'Total Field Size (DxTot : DyTot)');
    
    
    figureHandle.Object.txtDisplayTotalFieldSizeX = uicontrol( ...
        'Parent', figureHandle.Object.panelSamplingPointsAndDistance, ...
        'Tag', 'txtDisplayTotalFieldSizeX', ...
        'Style', 'edit', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.50,0.20,0.20,0.075], ...
        'BackgroundColor', [1 1 1], ...
        'String', '0', 'enable','off',...
        'FontSize',fontSize,'FontName',fontName);
    
    figureHandle.Object.txtDisplayTotalFieldSizeY = uicontrol( ...
        'Parent', figureHandle.Object.panelSamplingPointsAndDistance, ...
        'Tag', 'txtDisplayTotalFieldSizeY', ...
        'Style', 'edit', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.75,0.20,0.20,0.075], ...
        'BackgroundColor', [1 1 1], ...
        'String', '0', 'enable','off',...
        'FontSize',fontSize,'FontName',fontName);
    % -----------------------------------------------------------------
    
    figureHandle.Object.lblDisplayTotalSamplePoints = uicontrol( ...
        'Parent', figureHandle.Object.panelSamplingPointsAndDistance, ...
        'Tag', 'lblDisplayTotalSamplePoints', ...
        'Style', 'text', ...
        'HorizontalAlignment','right',...
        'Units','Normalized',...
        'Position', [0.02,0.09,0.45,0.075], ...
        'FontSize',fontSize,...
        'FontName',fontName,...
        'String', 'Total Sample Points (NxTot : NyTot)');
    
    
    figureHandle.Object.txtDisplayTotalSamplePointsX = uicontrol( ...
        'Parent', figureHandle.Object.panelSamplingPointsAndDistance, ...
        'Tag', 'txtDisplayTotalSamplePointsX', ...
        'Style', 'edit', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.50,0.10,0.20,0.075], ...
        'BackgroundColor', [1 1 1], ...
        'String', '0', 'enable','off',...
        'FontSize',fontSize,'FontName',fontName);
    
    figureHandle.Object.txtDisplayTotalSamplePointsY = uicontrol( ...
        'Parent', figureHandle.Object.panelSamplingPointsAndDistance, ...
        'Tag', 'txtDisplayTotalSamplePointsY', ...
        'Style', 'edit', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.75,0.10,0.20,0.075], ...
        'BackgroundColor', [1 1 1], ...
        'String', '0', 'enable','off',...
        'FontSize',fontSize,'FontName',fontName);
    
    % ----- 4. Spectral Parameters ----------------------------------
    
    figureHandle.Object.tabSpectralParameters = ...
        uitab(figureHandle.Object.SourceDefinitionTabGroup, 'title',...
        '   Spectral Parameters   ',...
        'ButtonDownFcn',{@tabSpectralParameters_ButtonDownFcn,figureHandle});
    
    figureHandle.Object.panelSpectralParameters = uipanel( ...
        'Parent', figureHandle.Object.tabSpectralParameters, ...
        'Tag', 'panelSpectralParameters', ...
        'Units','Normalized',...
        'Position',[0.02,0.1,0.9,0.8],...
        'FontSize',fontSize,...
        'FontName',fontName);%,...
    
    figureHandle.Object.tblSpectralParameters = uitable( ...
        'Parent', figureHandle.Object.panelSpectralParameters, ...
        'Tag', 'tblSpectralParameters', ...
        'UserData', zeros(1,0), ...
        'Units','Normalized',...
        'Position', [0.0,0.0,1.0,1.0], ...
        'fontSize',fontSize,'FontName',fontName,...
        'BackgroundColor', [1 1 1;0.961 0.961 0.961], ...
        'ColumnEditable', [false,true], ...
        'ColumnFormat', {'char','char'}, ...
        'ColumnName', {'Parameter Name','Parameter Value'}, ...
        'ColumnWidth', {300,200}, ...
        'RowName', 'numbered');
    
    set(figureHandle.Object.tblSpectralParameters,...
        'CellEditCallback',{@tblSpectralParameters_CellEditCallback,figureHandle},...
        'CellSelectionCallback',{@tblSpectralParameters_CellSelectionCallback,figureHandle});
    % -----------------------------------------------------------------
    
    figureHandle.Object.lblSpectralProfile = uicontrol( ...
        'Parent', figureHandle.Object.tabSpectralParameters, ...
        'Tag', 'lblSpectralProfile', ...
        'Style', 'text', ...
        'HorizontalAlignment','right',...
        'Units','Normalized',...
        'Position', [0.02,0.90,0.40,0.075], ...
        'FontSize',fontSize,...
        'FontName',fontName,...
        'Visible','On',...
        'String', 'Spectral Profile');
    
    [~,spectralProfileList] = getSupportedSpectralProfiles;
    figureHandle.Object.popSpectralProfile = uicontrol( ...
        'Parent', figureHandle.Object.tabSpectralParameters, ...
        'Tag', 'popSpatialProfile', ...
        'Style', 'popupmenu', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.45,0.90,0.45,0.075], ...
        'BackgroundColor', [1 1 1], ...
        'String', spectralProfileList, ...
        'Value',1,...
        'Visible','On',...
        'FontSize',fontSize,'FontName',fontName);
    
    % ----- 5. Polarization Parameters ----------------------------------
    figureHandle.Object.tabPolarizationParameters = ...
        uitab(figureHandle.Object.SourceDefinitionTabGroup, 'title',...
        '   Polarization Parameters   ',...
        'ButtonDownFcn',{@tabPolarizationParameters_ButtonDownFcn,figureHandle});
    
    figureHandle.Object.panelPolarizationParameters = uipanel( ...
        'Parent', figureHandle.Object.tabPolarizationParameters, ...
        'Tag', 'panelPolarizationParameters', ...
        'Units','Normalized',...
        'Position',[0.02,0.1,0.9,0.8],...
        'FontSize',fontSize,...
        'FontName',fontName);%,...
    
    figureHandle.Object.tblPolarizationParameters = uitable( ...
        'Parent', figureHandle.Object.panelPolarizationParameters, ...
        'Tag', 'tblPolarizationParameters', ...
        'UserData', zeros(1,0), ...
        'Units','Normalized',...
        'Position', [0.0,0.0,1.0,1.0], ...
        'fontSize',fontSize,'FontName',fontName,...
        'BackgroundColor', [1 1 1;0.961 0.961 0.961], ...
        'ColumnEditable', [false,true], ...
        'ColumnFormat', {'char','char'}, ...
        'ColumnName', {'Parameter Name','Parameter Value'}, ...
        'ColumnWidth', {300,200}, ...
        'RowName', 'numbered');
    
    set(figureHandle.Object.tblPolarizationParameters,...
        'CellEditCallback',{@tblPolarizationParameters_CellEditCallback,figureHandle},...
        'CellSelectionCallback',{@tblPolarizationParameters_CellSelectionCallback,figureHandle});
    % -----------------------------------------------------------------
    
    figureHandle.Object.lblPolarizationProfile = uicontrol( ...
        'Parent', figureHandle.Object.tabPolarizationParameters, ...
        'Tag', 'lblPolarizationProfile', ...
        'Style', 'text', ...
        'HorizontalAlignment','right',...
        'Units','Normalized',...
        'Position', [0.02,0.90,0.40,0.075], ...
        'FontSize',fontSize,...
        'FontName',fontName,...
        'Visible','On',...
        'String', 'Polarization Profile');
    
    [~,polarizationProfileList] = getSupportedPolarizationProfiles;
    figureHandle.Object.popPolarizationProfile = uicontrol( ...
        'Parent', figureHandle.Object.tabPolarizationParameters, ...
        'Tag', 'popPolarizationProfile', ...
        'Style', 'popupmenu', ...
        'HorizontalAlignment','left',...
        'Units','Normalized',...
        'Position', [0.45,0.90,0.45,0.075], ...
        'BackgroundColor', [1 1 1], ...
        'String', polarizationProfileList, ...
        'Value',1,...
        'Visible','On',...
        'FontSize',fontSize,'FontName',fontName);
    
    %-------------------------------------------------------------------
    % Callbacks
    set(figureHandle.Object.popSpatialProfile,...
        'Callback',{@popSpatialProfile_Callback,figureHandle});
    set(figureHandle.Object.popSpectralProfile,...
        'Callback',{@popSpectralProfile_Callback,figureHandle});
    set(figureHandle.Object.popPolarizationProfile,...
        'Callback',{@popPolarizationProfile_Callback,figureHandle});
    
    set(figureHandle.Object.popSmoothEdgeSizeSpecification,...
        'Callback',{@popSmoothEdgeSizeSpecification_Callback,figureHandle});
    set(figureHandle.Object.popFieldSizeSpecification,...
        'Callback',{@popFieldSizeSpecification_Callback,figureHandle});
    set(figureHandle.Object.popPrincipalDirectionSpecification,...
        'Callback',{@popPrincipalDirectionSpecification_Callback,figureHandle});
    set(figureHandle.Object.popZeroBoarderSizeSpecification,...
        'Callback',{@popZeroBoarderSizeSpecification_Callback,figureHandle});
    
    figureHandle.Object.cmdSave = uicontrol( ...
        'Parent', figureHandle.Object.MainFigureHandle, ...
        'Tag', 'cmdSave', ...
        'Style', 'pushbutton', ...
        'Units','Normalized',...
        'Position', [0.20,0.03,0.12,0.05], ...
        'FontSize',fontSize,...
        'FontName',fontName,...
        'String', 'Save', ...
        'Callback', {@cmdSave_Callback,figureHandle});
    figureHandle.Object.cmdView = uicontrol( ...
        'Parent', figureHandle.Object.MainFigureHandle, ...
        'Tag', 'cmdView', ...
        'Style', 'pushbutton', ...
        'Units','Normalized',...
        'Position', [0.35,0.03,0.12,0.05], ...
        'FontSize',fontSize,'FontName',fontName,...
        'String', 'View', ...
        'Callback', {@cmdView_Callback,figureHandle});
    
    figureHandle.Object.cmdOk = uicontrol( ...
        'Parent', figureHandle.Object.MainFigureHandle, ...
        'Tag', 'cmdOk', ...
        'Style', 'pushbutton', ...
        'Units','Normalized',...
        'Position', [0.73,0.03,0.12,0.05], ...
        'FontSize',fontSize,...
        'FontName',fontName,...
        'String', 'Ok', ...
        'Callback', {@cmdOk_Callback,figureHandle});
    figureHandle.Object.cmdCancel = uicontrol( ...
        'Parent', figureHandle.Object.MainFigureHandle, ...
        'Tag', 'cmdCancel', ...
        'Style', 'pushbutton', ...
        'Units','Normalized',...
        'Position', [0.87,0.03,0.12,0.05], ...
        'FontSize',fontSize,'FontName',fontName,...
        'String', 'Cancel', ...
        'Callback', {@cmdCancel_Callback,figureHandle});
    
    % Display the default harmonic field source
    displayTemporarySourceObject(figureHandle);
end

function [lateralPositionX,lateralPositionY,distanceToInputPlane,directionSpecification,...
        directionValue1,directionValue2,fieldSizeSpecification,fieldSizeValue1,...
        fieldSizeValue2,fieldBoarderShape,edgeSizeSpecification,...
        edgeSizeValue,zeroBoarderSizeSpecification,...
        zeroBoarderSizeValue1,zeroBoarderSizeValue2,mediumName] = readBasicParameters(figureHandle)
    % ----- 1. Basic Parameters --------------------------
    lateralPositionX = str2double(get(figureHandle.Object.txtLateralPositionX,'String'));
    lateralPositionY = str2double(get(figureHandle.Object.txtLateralPositionY,'String'));
    
    distanceToInputPlane = str2double(get(figureHandle.Object.txtDistanceToInputPlane,'String'));
    
    directionSpecification = (get(figureHandle.Object.popPrincipalDirectionSpecification,'Value'));
    directionValue1 = str2double(get(figureHandle.Object.txtPrincipalDirectionValue1,'String'));
    directionValue2 = str2double(get(figureHandle.Object.txtPrincipalDirectionValue2,'String'));
    
    fieldSizeSpecification = get(figureHandle.Object.popFieldSizeSpecification,'Value');
    fieldSizeValue1 = str2double(get(figureHandle.Object.txtFieldSizeValue1,'String'));
    fieldSizeValue2 = str2double(get(figureHandle.Object.txtFieldSizeValue2,'String'));
    fieldBoarderShape = get(figureHandle.Object.popFieldBoarderShape,'Value');
    
    edgeSizeSpecification = get(figureHandle.Object.popSmoothEdgeSizeSpecification,'Value');
    edgeSizeValue = str2double(get(figureHandle.Object.txtSmoothEdgeSizeValue,'String'));
%     edgeSizeValue2 = str2double(get(figureHandle.Object.txtSmoothEdgeSizeValue2,'String'));
    
    zeroBoarderSizeSpecification = get(figureHandle.Object.popZeroBoarderSizeSpecification,'Value');
    zeroBoarderSizeValue1 = str2double(get(figureHandle.Object.txtZeroBoarderSizeValue1,'String'));
    zeroBoarderSizeValue2 = str2double(get(figureHandle.Object.txtZeroBoarderSizeValue2,'String'));
    
    mediumName = (get(figureHandle.Object.txtMediumName,'String'));
end

function  [samplingPointsN1,samplingPointsN2,samplingDistance1,...
        samplingDistance2,samplingParameterType] = readSamplingParameters(figureHandle)
    % ----- 3. Sampling Parameters ----------------------------------
    givenSamplingPoints = get(figureHandle.Object.chkSamplingPoints,'Value');
    
    samplingPointsN1 = str2double(get(figureHandle.Object.txtSamplingPointsNX,'String'));
    samplingPointsN2 = str2double(get(figureHandle.Object.txtSamplingPointsNy,'String'));
    
    givenSamplingDistance = get(figureHandle.Object.chkSamplingDistance,'Value');
    
    samplingDistance1 = str2double(get(figureHandle.Object.txtSamplingDistanceX,'String'));
    samplingDistance2 = str2double(get(figureHandle.Object.txtSamplingDistanceY,'String'));
    
    if givenSamplingPoints
        samplingParameterType = 1;
    else
        samplingParameterType = 2;
    end
end

function displayTemporarySourceObject(figureHandle)
    displayBasicParameters(figureHandle);
    displaySamplingParameters(figureHandle);
    displaySpatialProfileParameters(figureHandle);
    displaySpectralProfileParameters(figureHandle);
    displayPolarizationProfileParameters(figureHandle);
end
function displayBasicParameters(figureHandle)
    tempSourceObject = figureHandle.Object.TemporarySourceObject;
    
    set(figureHandle.Object.txtLateralPositionX,'String',tempSourceObject.LateralPosition(1));
    set(figureHandle.Object.txtLateralPositionY,'String',tempSourceObject.LateralPosition(2));
    set(figureHandle.Object.txtDistanceToInputPlane,'String',tempSourceObject.DistanceToInputPlane);
    
    set(figureHandle.Object.popPrincipalDirectionSpecification,'Value',tempSourceObject.PrincipalDirectionSpecification);
    popPrincipalDirectionSpecification_Callback(0,0,figureHandle );
    set(figureHandle.Object.txtPrincipalDirectionValue1,'String',tempSourceObject.PrincipalDirectionValue(1));
    set(figureHandle.Object.txtPrincipalDirectionValue2,'String',tempSourceObject.PrincipalDirectionValue(2));
    
    set(figureHandle.Object.popFieldSizeSpecification,'Value',tempSourceObject.FieldSizeSpecification);
    set(figureHandle.Object.txtFieldSizeValue1,'String',tempSourceObject.FieldSizeValue(1));
    set(figureHandle.Object.txtFieldSizeValue2,'String',tempSourceObject.FieldSizeValue(2));
    set(figureHandle.Object.popFieldBoarderShape,'Value',tempSourceObject.FieldBoarderShape);
    
    set(figureHandle.Object.popSmoothEdgeSizeSpecification,'Value',tempSourceObject.SmoothEdgeSizeSpecification);
    popSmoothEdgeSizeSpecification_Callback(0,0,figureHandle );
    set(figureHandle.Object.txtSmoothEdgeSizeValue,'String',tempSourceObject.SmoothEdgeSizeValue(1));
%     set(figureHandle.Object.txtSmoothEdgeSizeValue2,'String',tempSourceObject.SmoothEdgeSizeValue(2));
    
    set(figureHandle.Object.popZeroBoarderSizeSpecification,'Value',tempSourceObject.ZeroBoarderSizeSpecification);
    popZeroBoarderSizeSpecification_Callback(0,0,figureHandle );
    set(figureHandle.Object.txtZeroBoarderSizeValue1,'String',tempSourceObject.ZeroBoarderSizeValue(1));
    set(figureHandle.Object.txtZeroBoarderSizeValue2,'String',tempSourceObject.ZeroBoarderSizeValue(2));
    
    set(figureHandle.Object.txtMediumName,'String',tempSourceObject.MediumName);
end

function displaySamplingParameters(figureHandle)
    tempSourceObject = figureHandle.Object.TemporarySourceObject;
    
    samplingParameterType = tempSourceObject.SamplingParameterType;
    if samplingParameterType == 1 % Number of sample points
        set(figureHandle.Object.chkSamplingPoints,'Value',true);
        % Enable Sampling point text boxes
        set(figureHandle.Object.txtSamplingPointsNX,'Enable','on');
        set(figureHandle.Object.txtSamplingPointsNy,'Enable','on');
        % Disable sampling distance text boxes
        set(figureHandle.Object.txtSamplingDistanceX,'Enable','off');
        set(figureHandle.Object.txtSamplingDistanceY,'Enable','off');
        % Diselect the chkSamplingDistance
        set(figureHandle.Object.chkSamplingDistance,'Value',false);
    else
        set(figureHandle.Object.chkSamplingDistance,'Value',true);
        % Disable Sampling point text boxes
        set(figureHandle.Object.txtSamplingPointsNX,'Enable','off');
        set(figureHandle.Object.txtSamplingPointsNy,'Enable','off');
        % Enable sampling distance text boxes
        set(figureHandle.Object.txtSamplingDistanceX,'Enable','on');
        set(figureHandle.Object.txtSamplingDistanceY,'Enable','on');
        % Diselect the chkSamplingPoints
        set(figureHandle.Object.chkSamplingPoints,'Value',false);
    end
    [ dx,dy ] = getHFSourceSamplingDistance( tempSourceObject );
    [ Nx1,Ny1 ] = getHFSourceNumberOfSamplingPoints( tempSourceObject,1 );
    
    set(figureHandle.Object.txtSamplingPointsNX,'String',Nx1);
    set(figureHandle.Object.txtSamplingPointsNy,'String',Ny1);
    
    set(figureHandle.Object.txtSamplingDistanceX,'String',dx);
    set(figureHandle.Object.txtSamplingDistanceY,'String',dy);
    
    set(figureHandle.Object.txtZeroBoarderSizeValue1,'String',...
        tempSourceObject.ZeroBoarderSizeValue(1));
    set(figureHandle.Object.txtZeroBoarderSizeValue2,'String',...
        tempSourceObject.ZeroBoarderSizeValue(2));
    
    % Compute and display the field sizes with smooth edge and with
    % additonal zero boarder
    [diameterX1,diameterY1] = getHFSourceSpatialShapeAndSize( tempSourceObject,1 );
    [diameterX2,diameterY2] = getHFSourceSpatialShapeAndSize( tempSourceObject,2 );
    
    % Actual field size with out zero boarder
    set(figureHandle.Object.txtDisplayActualFieldSizeWithSmoothEdgeX,'String',diameterX1);
    set(figureHandle.Object.txtDisplayActualFieldSizeWithSmoothEdgeY,'String',diameterY1);
    
    % Zero boarder absolute size
    [ zeroPixelsLeft,zeroPixelsRight,zeroPixelsTop,zeroPixelsBottom] = ...
        getHFSourceZeroBoarderPixels( tempSourceObject );
    set(figureHandle.Object.txtDisplayZeroBoarderSizeLeft,'String',zeroPixelsLeft*dx);
    set(figureHandle.Object.txtDisplayZeroBoarderSizeRight,'String',zeroPixelsRight*dx);
    set(figureHandle.Object.txtDisplayZeroBoarderSizeTop,'String',zeroPixelsTop*dy);
    set(figureHandle.Object.txtDisplayZeroBoarderSizeBottom,'String',zeroPixelsBottom*dy);

    set(figureHandle.Object.txtDisplayZeroBoarderSamplePointsLeft,'String',zeroPixelsLeft);
    set(figureHandle.Object.txtDisplayZeroBoarderSamplePointsRight,'String',zeroPixelsRight);
    set(figureHandle.Object.txtDisplayZeroBoarderSamplePointsTop,'String',zeroPixelsTop);
    set(figureHandle.Object.txtDisplayZeroBoarderSamplePointsBottom,'String',zeroPixelsBottom);
    
    % Total field size
    set(figureHandle.Object.txtDisplayTotalFieldSizeX,'String',diameterX2);
    set(figureHandle.Object.txtDisplayTotalFieldSizeY,'String',diameterY2);
    
    % Total field sampling points
    set(figureHandle.Object.txtDisplayTotalSamplePointsX,'String',zeroPixelsLeft+zeroPixelsRight+Nx1);
    set(figureHandle.Object.txtDisplayTotalSamplePointsY,'String',zeroPixelsTop+zeroPixelsBottom+Ny1);
end

function displaySpatialProfileParameters(figureHandle)
    if nargin < 1
        disp('Error: The function displaySpatialProfileParameters requires one input.');
        return;
    end
    
    fontSize = 11;
    fontName = 'FixedSize';
    
    guiHandles = figureHandle.Object;
    
    % get the spatial profile parameters from the corresponding
    % spatial profile function
    harmonicFieldSource = guiHandles.TemporarySourceObject;
    [ spatialParameterNames, spatialParameterFormats,...
        spatialParameters,spatialParameterDisplayNames  ] = getHFSourceSpatialProfileParameters(harmonicFieldSource);
    
    % Calculate the size of panelSpatialParameters based on the number of
    % parameters
    nPar = length(spatialParameterNames);
    tempTableData = cell(nPar,2);
    for pp = 1:nPar
        % Display the parameter value text boxes or popup menu
        parFormat = spatialParameterFormats{pp};
        parName = spatialParameterNames{pp};
        parDisplayName = spatialParameterDisplayNames{pp};
        parValue = spatialParameters.(parName);
        
        if iscell(parFormat)
            % Multiple choice values
            parValueDisplay = parFormat{parValue};
        else
            if strcmpi(parFormat,'logical')
                if parValue
                    parValueDisplay = 'True';
                else
                    parValueDisplay = 'False';
                end
            elseif strcmpi(parFormat,'numeric')
                parValueDisplay = num2str(parValue);
            elseif strcmpi(parFormat,'char')
                parValueDisplay = (parValue);
            elseif strcmpi(parFormat,'Glass')
                parValueDisplay = (parValue);
            else
                
            end
        end
        tempTableData{pp,1} = parDisplayName;
        tempTableData{pp,2} = parValueDisplay;
    end
    set(figureHandle.Object.tblSpatialParameters,'Data',tempTableData);
    figureHandle.Object = guiHandles;
end

function [spatialProfileType,spatialProfileParameters] =  ...
        readSpatialProfileParameters(figureHandle)
    spatialProfileType = get(figureHandle.Object.popSpatialProfile,'Value');
    
    spatialProfileParameterTable = get(figureHandle.Object.tblSpatialParameters,'Data');
    
    % get the spatial profile parameters from the corresponding
    % spatial profile function
    [ spatialParameterFields, spatialParameterFormats,spatialParameterStruct ] = ...
        getHFSourceSpatialProfileParameters( spatialProfileType);
    
    % Calculate the size of panelspectralParameters based on the number of
    % parameters
    nPar = length(spatialParameterFields);
    for pp = 1:nPar
        % Read the parameter value from text boxes or popup menu
        parFormat = spatialParameterFormats{pp};
        paramName = spatialParameterFields{pp};
        parValue = spatialProfileParameterTable{pp,2};
        if iscell(parFormat)
            % Multiple choice values
            parValueDisplay = parValue;
        else
            if strcmpi(parFormat,'logical')
                if strcmpi(parValue,'1') || strcmpi(parValue,'true')
                    newParameter = 1;
                elseif strcmpi(parValue,'0') || strcmpi(parValue,'false')
                    newParameter = 0;
                else
                    newParameter = 0;
                end
                spatialParameterStruct.(paramName) = newParameter;
            elseif strcmpi(parFormat,'char')
                
                newParameter = parValue;
                spatialParameterStruct.(paramName) = newParameter;
            elseif strcmpi(parFormat,'numeric')
                if isnumeric(parValue)
                    newParameter = (parValue);
                else
                    newParameter = str2num(parValue);
                end
                
                if isempty(newParameter)
                    newParameter = 0;
                end
                spatialParameterStruct.(paramName) = newParameter;
            else
                newParameter = parValue;
                spatialParameterStruct.(paramName) = newParameter;
            end
        end
    end
    spatialProfileParameters = spatialParameterStruct;
end

function popSpatialProfile_Callback(~,~,figureHandle )
    spatialProfileType = get(figureHandle.Object.popSpatialProfile,'Value');
    % get the default spatial parameter
    [ fieldNames,fieldFormat,defaultParamStruct ] = getHFSourceSpatialProfileParameters( spatialProfileType );
    figureHandle.Object.TemporarySourceObject.SpatialProfileType = spatialProfileType;
    figureHandle.Object.TemporarySourceObject.SpatialProfileParameter = defaultParamStruct;
    displaySpatialProfileParameters(figureHandle);
end

function displaySpectralProfileParameters(figureHandle)
    if nargin < 1
        disp('Error: The function displaySpectralProfileParameters requires one input.');
        return;
    end
    
    fontSize = 11;
    fontName = 'FixedSize';
    
    guiHandles = figureHandle.Object;
    
    % get the spectral profile parameters from the corresponding
    % spectral profile function
    harmonicFieldSource = guiHandles.TemporarySourceObject;
    [ spectralParameterNames, spectralParameterFormats,spectralParameters,...
        spectralParameterDisplayNames  ] = getHFSourceSpectralProfileParameters(harmonicFieldSource);
    
    % Calculate the size of panelSpatialParameters based on the number of
    % parameters
    nPar = length(spectralParameterNames);
    tempTableData = cell(nPar,2);
    for pp = 1:nPar
        % Display the parameter value text boxes or popup menu
        parFormat = spectralParameterFormats{pp};
        parName = spectralParameterNames{pp};
        parDisplayName = spectralParameterDisplayNames{pp};
        parValue = spectralParameters.(parName);
        
        if iscell(parFormat)
            % Multiple choice values
            parValueDisplay = parFormat{parValue};
        else
            if strcmpi(parFormat,'logical')
                if parValue
                    parValueDisplay = 'True';
                else
                    parValueDisplay = 'False';
                end
            elseif strcmpi(parFormat,'numeric')
                parValueDisplay = num2str(parValue);
            elseif strcmpi(parFormat,'char')
                parValueDisplay = (parValue);
            elseif strcmpi(parFormat,'Glass')
                parValueDisplay = (parValue);
            else
                
            end
        end
        tempTableData{pp,1} = parDisplayName;
        tempTableData{pp,2} = parValueDisplay;
    end
    set(figureHandle.Object.tblSpectralParameters,'Data',tempTableData);
    figureHandle.Object =  guiHandles;
end
function [spectralProfileType,spectralProfileParameters] =  readSpectralProfileParameters(figureHandle)
    spectralProfileType = get(figureHandle.Object.popSpectralProfile,'Value');
    spectralProfileParameterTable = get(figureHandle.Object.tblSpectralParameters,'Data');
    % get the spectral profile parameters from the corresponding
    % spectral profile function
    [ spectralParameterFields, spectralParameterFormats,spectralParameterStruct ] = ...
        getHFSourceSpectralProfileParameters( (spectralProfileType) );
    
    % Calculate the size of panelspectralParameters based on the number of
    % parameters
    nPar = length(spectralParameterFields);
    for pp = 1:nPar
        % Read the parameter value from text boxes or popup menu
        parFormat = spectralParameterFormats{pp};
        paramName = spectralParameterFields{pp};
        parValue = spectralProfileParameterTable{pp,2};
        if iscell(parFormat)
            % Multiple choice values
            parValueDisplay = parValue;
        else
            if strcmpi(parFormat,'logical')
                if strcmpi(parValue,'1') || strcmpi(parValue,'true')
                    newParameter = 1;
                elseif strcmpi(parValue,'0') || strcmpi(parValue,'false')
                    newParameter = 0;
                else
                    newParameter = 0;
                end
                spectralParameterStruct.(paramName) = newParameter;
            elseif strcmpi(parFormat,'char')
                
                newParameter = parValue;
                spectralParameterStruct.(paramName) = newParameter;
            elseif strcmpi(parFormat,'numeric')
                if isnumeric(parValue)
                    newParameter = (parValue);
                else
                    newParameter = str2num(parValue);
                end
                
                if isempty(newParameter)
                    newParameter = 0;
                end
                spectralParameterStruct.(paramName) = newParameter;
            else
                newParameter = parValue;
                spectralParameterStruct.(paramName) = newParameter;
            end
        end
    end
    spectralProfileParameters = spectralParameterStruct;
end

function popSpectralProfile_Callback(~,~,figureHandle )
    spectralProfileType = get(figureHandle.Object.popSpectralProfile,'Value');
    % get the default spectral profile parameters from the corresponding
    % spectral profile function
    [ ~, ~,defaultParamStruct ] = getHFSourceSpectralProfileParameters( spectralProfileType );
    
    figureHandle.Object.TemporarySourceObject.SpectralProfileType = spectralProfileType;
    figureHandle.Object.TemporarySourceObject.SpectralProfileParameter = defaultParamStruct;
    
    displaySpectralProfileParameters(figureHandle);
end

function displayPolarizationProfileParameters(figureHandle)
    if nargin < 1
        disp('Error: The function displayPolarizationProfileParameters requires one input.');
        return;
    end
    guiHandles = figureHandle.Object;
    
    % get the Polarization profile parameters from the corresponding
    % Polarization profile function
    harmonicFieldSource = guiHandles.TemporarySourceObject;
    [ polarizationParameterNames, polarizationParameterFormats,...
        polarizationParameters,polarizationParameterDisplayNames  ] = ...
        getHFSourcePolarizationProfileParameters(harmonicFieldSource);
    
    % Calculate the size of panelSpatialParameters based on the number of
    % parameters
    nPar = length(polarizationParameterNames);
    tempTableData = cell(nPar,2);
    for pp = 1:nPar
        % Display the parameter value text boxes or popup menu
        parFormat = polarizationParameterFormats{pp};
        parName = polarizationParameterNames{pp};
        parDisplayName = polarizationParameterDisplayNames{pp};
        parValue = polarizationParameters.(parName);
        
        if iscell(parFormat)
            % Multiple choice values
            parValueDisplay = parFormat{parValue};
        else
            if strcmpi(parFormat,'logical')
                if parValue
                    parValueDisplay = 'True';
                else
                    parValueDisplay = 'False';
                end
            elseif strcmpi(parFormat,'numeric')
                parValueDisplay = num2str(parValue);
            elseif strcmpi(parFormat,'char')
                parValueDisplay = (parValue);
            elseif strcmpi(parFormat,'Glass')
                parValueDisplay = (parValue);
            else
                
            end
        end
        tempTableData{pp,1} = parDisplayName;
        tempTableData{pp,2} = parValueDisplay;
    end
    set(figureHandle.Object.tblPolarizationParameters,'Data',tempTableData);
    figureHandle.Object = guiHandles;
end
function [polarizationType,polarizationParameters] =  readPolarizationProfileParameters(figureHandle)
    
    polarizationType = get(figureHandle.Object.popPolarizationProfile,'Value');
    polarizationParameterTable = get(figureHandle.Object.tblPolarizationParameters,'Data');
    
    % get the Polarization profile parameters from the corresponding
    % Polarization profile function
    [ polarizationParameterFields, polarizationParameterFormats,...
        polarizationParameterStruct ] = getHFSourcePolarizationProfileParameters( (polarizationType) );
    
    % Calculate the size of panelSpatialParameters based on the number of
    % parameters
    nPar = length(polarizationParameterFields);
    for pp = 1:nPar
        % Read the parameter value from text boxes or popup menu
        parFormat = polarizationParameterFormats{pp};
        paramName = polarizationParameterFields{pp};
        parValue = polarizationParameterTable{pp,2};
        if iscell(parFormat)
            % Multiple choice values
            parValueDisplay = parValue;
        else
            if strcmpi(parFormat,'logical')
                if strcmpi(parValue,'1') || strcmpi(parValue,'true')
                    newParameter = 1;
                elseif strcmpi(parValue,'0') || strcmpi(parValue,'false')
                    newParameter = 0;
                else
                    newParameter = 0;
                end
                polarizationParameterStruct.(paramName) = newParameter;
            elseif strcmpi(parFormat,'char')
                newParameter = parValue;
                polarizationParameterStruct.(paramName) = newParameter;
            elseif strcmpi(parFormat,'numeric')
                if isnumeric(parValue)
                    newParameter = (parValue);
                else
                    newParameter = str2num(parValue);
                end
                
                if isempty(newParameter)
                    newParameter = 0;
                end
                polarizationParameterStruct.(paramName) = newParameter;
            else
                newParameter = parValue;
                polarizationParameterStruct.(paramName) = newParameter;
            end
        end
    end
    polarizationParameters = polarizationParameterStruct;
end

function popPolarizationProfile_Callback(~,~,figureHandle )
    polarizationProfileType = get(figureHandle.Object.popPolarizationProfile,'Value');
    
    % get the default polarization profile parameters from the corresponding
    % polarization profile function
    [ ~, ~,defaultParamStruct ] = getHFSourcePolarizationProfileParameters( polarizationProfileType );
    
    figureHandle.Object.TemporarySourceObject.PolarizationProfileType = polarizationProfileType;
    figureHandle.Object.TemporarySourceObject.PolarizationProfileParameter = defaultParamStruct;
    
    displayPolarizationProfileParameters(figureHandle);
end

function popSmoothEdgeSizeSpecification_Callback(~,~,figureHandle )
    switch (get(figureHandle.Object.popSmoothEdgeSizeSpecification,'Value'))
        case 1 %lower('Relative')
            set(figureHandle.Object.lblSmoothEdgeSizeValue,'String','Edge Size Factor');
        case 2 %lower('Absolute')
            set(figureHandle.Object.lblSmoothEdgeSizeValue,'String','Actual Edge Size');
    end
end
function popFieldSizeSpecification_Callback(~,~,figureHandle )
    switch get(figureHandle.Object.popFieldSizeSpecification,'Value')
        case 1 %lower('Relative')
            set(figureHandle.Object.lblFieldSizeValue,'String','Field Size Factor');
            set(figureHandle.Object.popFieldBoarderShape,'Enable','Off');
        case 2 %lower('Absolute')
            set(figureHandle.Object.lblFieldSizeValue,'String','Actual Field Size');
            set(figureHandle.Object.popFieldBoarderShape,'Enable','On');
    end
end
function popPrincipalDirectionSpecification_Callback(~,~,figureHandle )
    direcSpec = get(figureHandle.Object.popPrincipalDirectionSpecification,'Value');
    [  fullName,displayName ] = getSupportedDirectionSpecifications(direcSpec) ;
    set(figureHandle.Object.lblPrincipalDirectionValue,'string',displayName);
end

function popZeroBoarderSizeSpecification_Callback(~,~,figureHandle )
    switch (get(figureHandle.Object.popZeroBoarderSizeSpecification,'Value'))
        case 1 %lower('Relative')
            set(figureHandle.Object.lblZeroBoarderSizeValue,'String','Zero Boarder Size Factor');
        case 2 %lower('Absolute')
            set(figureHandle.Object.lblZeroBoarderSizeValue,'String','Actual Zero Boarder Size');
    end
end

function updateTemporarySourceObject(figureHandle)
    [lateralPositionX,lateralPositionY,distanceToInputPlane,directionSpecification,...
        directionValue1,directionValue2,fieldSizeSpecification,actualFieldSizeValue1,...
        actualFieldSizeValue2,actualFieldBoarderShape,edgeSizeSpecification,...
        edgeSizeValue,zeroBoarderSizeSpecification,...
        zeroBoarderSizeValueX,zeroBoarderSizeValue2,mediumName] = readBasicParameters(figureHandle);
    
    [samplingPointsN1,samplingPointsN2,samplingDistance1,...
        samplingDistance2,samplingParameterType] = readSamplingParameters(figureHandle);
    
    [spatialProfileType,spatialProfileParameter] = readSpatialProfileParameters(figureHandle);
    
    [spectralProfileType,spectralProfileParameter] = readSpectralProfileParameters(figureHandle);
    [polarizationProfileType,polarizationProfileParameter] = readPolarizationProfileParameters(figureHandle);
    
    % Assign all values to the temporary source object
    lateralPosition = [lateralPositionX,lateralPositionY]';
    directionValue = [directionValue1,directionValue2]';
    actualFieldSizeValue = [actualFieldSizeValue1,actualFieldSizeValue2]';
    samplingPoints = [samplingPointsN1,samplingPointsN2]';
%     edgeSizeValue = edgeSizeValue;
    samplingDistance = [samplingDistance1,samplingDistance2]';
    
    zeroBoarderSizeValueY = [zeroBoarderSizeValueX,zeroBoarderSizeValue2]';
    
    if samplingParameterType == 1;
        samplingParameterValues = samplingPoints;
    else
        samplingParameterValues = samplingDistance;
    end
    
    tempSource = HarmonicFieldSource(...
        lateralPosition,directionSpecification,...
        directionValue,distanceToInputPlane,...
        fieldSizeSpecification,actualFieldSizeValue,actualFieldBoarderShape,...
        edgeSizeSpecification,edgeSizeValue,...
        zeroBoarderSizeSpecification,zeroBoarderSizeValueY,...
        samplingParameterType,samplingParameterValues,...
        spatialProfileType,spatialProfileParameter,...
        spectralProfileType,spectralProfileParameter,...
        polarizationProfileType,polarizationProfileParameter,mediumName);
    
    
    % Make sure that the zero boarder size fits to end of the last pixel
    [samplingDist1,samplingDist2] = getHFSourceSamplingDistance(tempSource);
    [zeroBoarderSizeLeft,zeroBoarderSizeRight,zeroBoarderSizeTop,...
        zeroBoarderSizeBottom] = ...
        getHFSourceZeroBoarderAbsoluteSize(tempSource);
    zeroBoarderSizeValue1_Absolute = min([zeroBoarderSizeLeft,zeroBoarderSizeRight]);
    zeroBoarderSizeValue2_Absolute = min([zeroBoarderSizeTop,zeroBoarderSizeBottom]);
    zeroBoarderSizeValueX = round(zeroBoarderSizeValue1_Absolute/samplingDist1)*samplingDist1;
    zeroBoarderSizeValueY = round(zeroBoarderSizeValue2_Absolute/samplingDist2)*samplingDist2;
    if tempSource.ZeroBoarderSizeSpecification == 1 % Relative
        [fieldSize1,fieldSize2] = getHFSourceSpatialShapeAndSize( tempSource,1 );
        zeroBoarderSizeValueX = zeroBoarderSizeValueX/fieldSize1;
        zeroBoarderSizeValueY = zeroBoarderSizeValueY/fieldSize2;
    end
    tempSource.ZeroBoarderSizeValue = [zeroBoarderSizeValueX,zeroBoarderSizeValueY]';
    figureHandle.Object.TemporarySourceObject = tempSource;
    %     displayTemporarySourceObject(figureHandle);
end

function cmdSave_Callback(~,~,figureHandle)
    updateTemporarySourceObject(figureHandle)
    currentSourceObject = figureHandle.Object.TemporarySourceObject;
    setappdata(0,'HarmonicFieldSource',currentSourceObject);
end
function cmdView_Callback(~,~,figureHandle)
    fontName = figureHandle.Object.FontName;
    fontSize = figureHandle.Object.FontSize;
    
    updateTemporarySourceObject(figureHandle)
    currentSourceObject = figureHandle.Object.TemporarySourceObject;
    setappdata(0,'HarmonicFieldSource',currentSourceObject);
    variableInputArgument = 'CurrentHarmonicFieldSource';
    harmonicFieldSetViewer( variableInputArgument,fontSize,fontName );
end

function cmdCancel_Callback(~,~,figureHandle)
    close(figureHandle.Object.MainFigureHandle);
end
function cmdOk_Callback(~,~,figureHandle)
    updateTemporarySourceObject(figureHandle)
    currentSourceObject = figureHandle.Object.TemporarySourceObject;
    setappdata(0,'HarmonicFieldSource',currentSourceObject);
    close(figureHandle.Object.MainFigureHandle);
end

function chkSamplingPoints_Callback(hObject, eventdata,figureHandle)
    if get(hObject,'Value')
        % Enable Sampling point text boxes
        set(figureHandle.Object.txtSamplingPointsNX,'Enable','on');
        set(figureHandle.Object.txtSamplingPointsNy,'Enable','on');
        % Disable sampling distance text boxes
        set(figureHandle.Object.txtSamplingDistanceX,'Enable','off');
        set(figureHandle.Object.txtSamplingDistanceY,'Enable','off');
        % Diselect the chkSamplingDistance
        set(figureHandle.Object.chkSamplingDistance,'Value',false);
    else
        % Direct diselcting is not allowed so reset the check box
        set(hObject,'Value',true);
    end
end

function chkSamplingDistance_Callback(hObject, eventdata,figureHandle)
    if get(hObject,'Value')
        % Disable Sampling point text boxes
        set(figureHandle.Object.txtSamplingPointsNX,'Enable','off');
        set(figureHandle.Object.txtSamplingPointsNy,'Enable','off');
        % Enable sampling distance text boxes
        set(figureHandle.Object.txtSamplingDistanceX,'Enable','on');
        set(figureHandle.Object.txtSamplingDistanceY,'Enable','on');
        % Diselect the chkSamplingPoints
        set(figureHandle.Object.chkSamplingPoints,'Value',false);
    else
        % Direct diselcting is not allowed so reset the check box
        set(hObject,'Value',true);
    end
end

function tabBasicParameters_ButtonDownFcn(hObject, eventdata,figureHandle)
    updateTemporarySourceObject(figureHandle);
    displaySamplingParameters(figureHandle);
end

function tabSpatialParameters_ButtonDownFcn(hObject, eventdata,figureHandle)
    updateTemporarySourceObject(figureHandle);
    
    displaySamplingParameters(figureHandle);
end

function tabSamplingParameters_ButtonDownFcn(hObject, eventdata,figureHandle)
    updateTemporarySourceObject(figureHandle);
    displaySamplingParameters(figureHandle);
end

function tabSpectralParameters_ButtonDownFcn(hObject, eventdata,figureHandle)
    updateTemporarySourceObject(figureHandle);
end

function tabPolarizationParameters_ButtonDownFcn(hObject, eventdata,figureHandle)
    updateTemporarySourceObject(figureHandle);
end

function tblSpatialParameters_CellEditCallback(hObject,eventdata,figureHandle)
    % hObject    handle to aodHandles.tblStandardData (see GCBO)
    % eventdata  structure with the following fields (see UITABLE)
    %	Indices: row and column indices of the cell(s) edited
    %	PreviousData: previous data for the cell(s) edited
    %	EditData: string(s) entered by the user
    %	NewData: EditData or its converted form set on the Data property. Empty if Data was not changed
    %	Error: error string when failed to convert EditData to appropriate value for Data
    % figureHandle    structure with figureHandle and user data (see GUIDATA)
    if isempty(eventdata.Indices)
        return;
    end
    editedRow = eventdata.Indices(1);
    editedColumn = eventdata.Indices(2);
    index = get(figureHandle.Object.popSpatialProfile,'Value');
    [ spatialProfileType ] = getSupportedSpatialProfiles(index);
    
    [ spatialParameterFields, spatialParameterFormats,~ ] = getHFSourceSpatialProfileParameters( spatialProfileType);
    paramName = spatialParameterFields{editedRow};
    paramFormat = spatialParameterFormats{editedRow};
    editedParamValue = hObject.Data{editedRow,2};
    if iscell(paramFormat)
        % Multiple choice values
        [IsFoundVector,locationIndex] = ismember(editedParamValue,paramFormat);
        if locationIndex
            editedParamValue = num2str(locationIndex);
            editedParamValue_Disp = paramFormat{locationIndex};
        else
            
        end
    else
        if strcmpi(paramFormat,'logical')
            if strcmpi(editedParamValue,'True') || strcmpi(editedParamValue,'1')
                editedParamValue = 1;
                editedParamValue_Disp = 'True';
            elseif strcmpi(editedParamValue,'False')|| strcmpi(editedParamValue,'0')
                editedParamValue = 0;
                editedParamValue_Disp = 'False';
            else
                editedParamValue = 0;
                editedParamValue_Disp = 'False';
            end
        elseif strcmpi(paramFormat,'numeric')
            editedParamValue_Disp = (editedParamValue);
            editedParamValue = str2double(editedParamValue);
            if isempty(editedParamValue)||isnan(editedParamValue)
                disp('Error: Only numeric values are allowed for the field.');
                editedParamValue = 0;
                editedParamValue_Disp = '0';
                tableData1 = get(figureHandle.Object.tblSpatialParameters,'Data');
                tableData1{editedRow,2} = editedParamValue_Disp;
                set(figureHandle.Object.tblSpatialParameters,'Data',tableData1);
            end
        elseif strcmpi(paramFormat,'char')
            
        elseif strcmpi(paramFormat,'Glass')
            
        else
            
        end
    end
    
    tableData1 = get(figureHandle.Object.tblSpatialParameters,'Data');
    tableData1{editedRow,2} = editedParamValue_Disp;
    set(figureHandle.Object.tblSpatialParameters,'Data',tableData1);
end

function tblSpatialParameters_CellSelectionCallback(hObject,eventdata,figureHandle)
    % hObject    handle to aodHandles.tblStandardData (see GCBO)
    % eventdata  structure with the following fields (see UITABLE)
    %	Indices: row and column indices of the cell(s) edited
    %	PreviousData: previous data for the cell(s) edited
    %	EditData: string(s) entered by the user
    %	NewData: EditData or its converted form set on the Data property. Empty if Data was not changed
    %	Error: error string when failed to convert EditData to appropriate value for Data
    % figureHandle    structure with figureHandle and user data (see GUIDATA)
    if isempty(eventdata.Indices)
        return;
    end
    selectedRow = eventdata.Indices(1);
    selectedColumn = eventdata.Indices(2);
    if selectedColumn == 2
        index = get(figureHandle.Object.popSpatialProfile,'Value');
        [ spatialProfileType ] = getSupportedSpatialProfiles(index);
        [ spatialParameterFields, spatialParameterFormats,~ ] = getHFSourceSpatialProfileParameters( spatialProfileType);
        paramName = spatialParameterFields{selectedRow};
        paramFormat = spatialParameterFormats{selectedRow};
        if iscell(paramFormat)
            % Multiple choice values
            choice = menu(paramName,paramFormat);
            if choice == 0
                choice = 1;
            end
            editedParamValue = choice;
            
            editedParamValue_Disp = paramFormat{editedParamValue};
            tableData1 = get(figureHandle.Object.tblSpatialParameters,'Data');
            tableData1{selectedRow,2} = editedParamValue_Disp;
            set(figureHandle.Object.tblSpatialParameters,'Data',tableData1);
        else
            if strcmpi(paramFormat,'logical')
                % Multiple choice values True or False
                trueFalse =  {'True','False'};
                choice = menu(paramName,trueFalse);
                if choice == 0
                    choice = 2; % False by default
                end
                editedParamValue = choice;
                
                editedParamValue_Disp = trueFalse{editedParamValue};
                tableData1 = get(figureHandle.Object.tblSpatialParameters,'Data');
                tableData1{selectedRow,2} = editedParamValue_Disp;
                set(figureHandle.Object.tblSpatialParameters,'Data',tableData1);
            elseif strcmpi(paramFormat,'numeric')
                editedParamValue_Disp = hObject.Data{selectedRow,2};
                editedParamValue = str2num(editedParamValue_Disp);
                if isempty(editedParamValue)||isnan(editedParamValue)
                    editedParamValue_Disp = '0';
                end
                tableData1 = get(figureHandle.Object.tblSpatialParameters,'Data');
                tableData1{selectedRow,2} = editedParamValue_Disp;
                set(figureHandle.Object.tblSpatialParameters,'Data',tableData1);
            elseif strcmpi(paramFormat,'char')
                
            elseif strcmpi(paramFormat,'Glass')
                
            else
                
            end
        end
    end
end

function tblSpectralParameters_CellEditCallback(hObject,eventdata,figureHandle)
    % hObject    handle to aodHandles.tblStandardData (see GCBO)
    % eventdata  structure with the following fields (see UITABLE)
    %	Indices: row and column indices of the cell(s) edited
    %	PreviousData: previous data for the cell(s) edited
    %	EditData: string(s) entered by the user
    %	NewData: EditData or its converted form set on the Data property. Empty if Data was not changed
    %	Error: error string when failed to convert EditData to appropriate value for Data
    % figureHandle    structure with figureHandle and user data (see GUIDATA)
    if isempty(eventdata.Indices)
        return;
    end
    editedRow = eventdata.Indices(1);
    editedColumn = eventdata.Indices(2);
    
    index = get(figureHandle.Object.popSpectralProfile,'Value');
    [ spectralProfileType ] = getSupportedSpectralProfiles(index);
    [ spectralParameterFields, spectralParameterFormats,~ ] = getHFSourceSpectralProfileParameters( spectralProfileType);
    
    paramName = spectralParameterFields{editedRow};
    paramFormat = spectralParameterFormats{editedRow};
    editedParamValue = hObject.Data{editedRow,2};
    if iscell(paramFormat)
        % Multiple choice values
        [IsFoundVector,locationIndex] = ismember(editedParamValue,paramFormat);
        if locationIndex
            editedParamValue = num2str(locationIndex);
            editedParamValue_Disp = paramFormat{locationIndex};
        else
            
        end
        
    else
        if strcmpi(paramFormat,'logical')
            if strcmpi(editedParamValue,'True') || strcmpi(editedParamValue,'1')
                editedParamValue = 1;
                editedParamValue_Disp = 'True';
            elseif strcmpi(editedParamValue,'False')|| strcmpi(editedParamValue,'0')
                editedParamValue = 0;
                editedParamValue_Disp = 'False';
            else
                editedParamValue = 0;
                editedParamValue_Disp = 'False';
            end
        elseif strcmpi(paramFormat,'numeric')
            editedParamValue_Disp = (editedParamValue);
            editedParamValue = str2double(editedParamValue);
            if isempty(editedParamValue)||isnan(editedParamValue)
                %disp('Error: Only numeric values are allowed for the field.');
                editedParamValue = 0;
                editedParamValue_Disp = '0';
                tableData1 = get(figureHandle.Object.tblSpectralParameters,'Data');
                tableData1{editedRow,2} = editedParamValue_Disp;
                set(figureHandle.Object.tblSpectralParameters,'Data',tableData1);
            end
        elseif strcmpi(paramFormat,'char')
            
        elseif strcmpi(paramFormat,'Glass')
            
        else
            
        end
    end
    
    tableData1 = get(figureHandle.Object.tblSpectralParameters,'Data');
    tableData1{editedRow,2} = editedParamValue_Disp;
    set(figureHandle.Object.tblSpectralParameters,'Data',tableData1);
end

function tblSpectralParameters_CellSelectionCallback(hObject,eventdata,figureHandle)
    % hObject    handle to aodHandles.tblStandardData (see GCBO)
    % eventdata  structure with the following fields (see UITABLE)
    %	Indices: row and column indices of the cell(s) edited
    %	PreviousData: previous data for the cell(s) edited
    %	EditData: string(s) entered by the user
    %	NewData: EditData or its converted form set on the Data property. Empty if Data was not changed
    %	Error: error string when failed to convert EditData to appropriate value for Data
    % figureHandle    structure with figureHandle and user data (see GUIDATA)
    if isempty(eventdata.Indices)
        return;
    end
    selectedRow = eventdata.Indices(1);
    selectedColumn = eventdata.Indices(2);
    if selectedColumn == 2
        index = get(figureHandle.Object.popSpectralProfile,'Value');
        [ spectralProfileType ] = getSupportedSpectralProfiles(index);
        [ spectralParameterFields, spectralParameterFormats,~ ] = getHFSourceSpectralProfileParameters( spectralProfileType);
        paramName = spectralParameterFields{selectedRow};
        paramFormat = spectralParameterFormats{selectedRow};
        if iscell(paramFormat)
            % Multiple choice values
            choice = menu(paramName,paramFormat);
            if choice == 0
                choice = 1;
            end
            editedParamValue = choice;
            
            editedParamValue_Disp = paramFormat{editedParamValue};
            tableData1 = get(figureHandle.Object.tblSpectralParameters,'Data');
            tableData1{selectedRow,2} = editedParamValue_Disp;
            set(figureHandle.Object.tblSpectralParameters,'Data',tableData1);
        else
            if strcmpi(paramFormat,'logical')
                % Multiple choice values True or False
                trueFalse =  {'True','False'};
                choice = menu(paramName,trueFalse);
                if choice == 0
                    choice = 2; % False by default
                end
                editedParamValue = choice;
                
                editedParamValue_Disp = trueFalse{editedParamValue};
                tableData1 = get(figureHandle.Object.tblSpectralParameters,'Data');
                tableData1{selectedRow,2} = editedParamValue_Disp;
                set(figureHandle.Object.tblSpectralParameters,'Data',tableData1);
            elseif strcmpi(paramFormat,'numeric')
                editedParamValue_Disp = hObject.Data{selectedRow,2};
                editedParamValue = str2num(editedParamValue_Disp);
                if isempty(editedParamValue)||isnan(editedParamValue)
                    editedParamValue_Disp = '0';
                end
                tableData1 = get(figureHandle.Object.tblSpectralParameters,'Data');
                tableData1{selectedRow,2} = editedParamValue_Disp;
                set(figureHandle.Object.tblSpectralParameters,'Data',tableData1);
            elseif strcmpi(paramFormat,'char')
                
            elseif strcmpi(paramFormat,'Glass')
                
            else
                
            end
        end
    end
end

function tblPolarizationParameters_CellEditCallback(hObject,eventdata,figureHandle)
    % hObject    handle to aodHandles.tblStandardData (see GCBO)
    % eventdata  structure with the following fields (see UITABLE)
    %	Indices: row and column indices of the cell(s) edited
    %	PreviousData: previous data for the cell(s) edited
    %	EditData: string(s) entered by the user
    %	NewData: EditData or its converted form set on the Data property. Empty if Data was not changed
    %	Error: error string when failed to convert EditData to appropriate value for Data
    % figureHandle    structure with figureHandle and user data (see GUIDATA)
    if isempty(eventdata.Indices)
        return;
    end
    editedRow = eventdata.Indices(1);
    editedColumn = eventdata.Indices(2);
    index = get(figureHandle.Object.popPolarizationProfile,'Value');
    [ polarizationProfileType ] = getSupportedPolarizationProfiles(index);

    [ polarizationParameterFields, polarizationParameterFormats,~ ] = getHFSourcePolarizationProfileParameters( polarizationProfileType);
    
    paramName = polarizationParameterFields{editedRow};
    paramFormat = polarizationParameterFormats{editedRow};
    editedParamValue = hObject.Data{editedRow,2};
    if iscell(paramFormat)
        % Multiple choice values
        [IsFoundVector,locationIndex] = ismember(editedParamValue,paramFormat);
        if locationIndex
            editedParamValue = num2str(locationIndex);
            editedParamValue_Disp = paramFormat{locationIndex};
        else
        end
    else
        if strcmpi(paramFormat,'logical')
            if strcmpi(editedParamValue,'True') || strcmpi(editedParamValue,'1')
                editedParamValue = 1;
                editedParamValue_Disp = 'True';
            elseif strcmpi(editedParamValue,'False')|| strcmpi(editedParamValue,'0')
                editedParamValue = 0;
                editedParamValue_Disp = 'False';
            else
                editedParamValue = 0;
                editedParamValue_Disp = 'False';
            end
        elseif strcmpi(paramFormat,'numeric')
            editedParamValue_Disp = (editedParamValue);
            editedParamValue = str2double(editedParamValue);
            if isempty(editedParamValue)||isnan(editedParamValue)
                %disp('Error: Only numeric values are allowed for the field.');
                editedParamValue = 0;
                editedParamValue_Disp = '0';
                tableData1 = get(figureHandle.Object.tblPolarizationParameters,'Data');
                tableData1{editedRow,2} = editedParamValue_Disp;
                set(figureHandle.Object.tblPolarizationParameters,'Data',tableData1);
            end
        elseif strcmpi(paramFormat,'char')
            
        elseif strcmpi(paramFormat,'Glass')
            
        else
            
        end
    end
    
    tableData1 = get(figureHandle.Object.tblPolarizationParameters,'Data');
    tableData1{editedRow,2} = editedParamValue_Disp;
    set(figureHandle.Object.tblPolarizationParameters,'Data',tableData1);
end

function tblPolarizationParameters_CellSelectionCallback(hObject,eventdata,figureHandle)
    % hObject    handle to aodHandles.tblStandardData (see GCBO)
    % eventdata  structure with the following fields (see UITABLE)
    %	Indices: row and column indices of the cell(s) edited
    %	PreviousData: previous data for the cell(s) edited
    %	EditData: string(s) entered by the user
    %	NewData: EditData or its converted form set on the Data property. Empty if Data was not changed
    %	Error: error string when failed to convert EditData to appropriate value for Data
    % figureHandle    structure with figureHandle and user data (see GUIDATA)
    if isempty(eventdata.Indices)
        return;
    end
    selectedRow = eventdata.Indices(1);
    selectedColumn = eventdata.Indices(2);
    if selectedColumn == 2
        index = get(figureHandle.Object.popPolarizationProfile,'Value');
        [ polarizationProfileType ] = getSupportedPolarizationProfiles(index);

        [ polarizationParameterFields, polarizationParameterFormats,~ ] = getHFSourcePolarizationProfileParameters( polarizationProfileType);
        paramName = polarizationParameterFields{selectedRow};
        paramFormat = polarizationParameterFormats{selectedRow};
        if iscell(paramFormat)
            % Multiple choice values
            choice = menu(paramName,paramFormat);
            if choice == 0
                choice = 1;
            end
            editedParamValue = choice;
            
            editedParamValue_Disp = paramFormat{editedParamValue};
            tableData1 = get(figureHandle.Object.tblPolarizationParameters,'Data');
            tableData1{selectedRow,2} = editedParamValue_Disp;
            set(figureHandle.Object.tblPolarizationParameters,'Data',tableData1);
        else
            if strcmpi(paramFormat,'logical')
                % Multiple choice values True or False
                trueFalse =  {'True','False'};
                choice = menu(paramName,trueFalse);
                if choice == 0
                    choice = 2; % False by default
                end
                editedParamValue = choice;
                
                editedParamValue_Disp = trueFalse{editedParamValue};
                tableData1 = get(figureHandle.Object.tblPolarizationParameters,'Data');
                tableData1{selectedRow,2} = editedParamValue_Disp;
                set(figureHandle.Object.tblPolarizationParameters,'Data',tableData1);
            elseif strcmpi(paramFormat,'numeric')
                editedParamValue_Disp = hObject.Data{selectedRow,2};
                editedParamValue = str2num(editedParamValue_Disp);
                if isempty(editedParamValue)||isnan(editedParamValue)
                    editedParamValue_Disp = '0';
                end
                tableData1 = get(figureHandle.Object.tblPolarizationParameters,'Data');
                tableData1{selectedRow,2} = editedParamValue_Disp;
                set(figureHandle.Object.tblPolarizationParameters,'Data',tableData1);
            elseif strcmpi(paramFormat,'char')
                
            elseif strcmpi(paramFormat,'Glass')
                
            else
                
            end
        end
    end
end